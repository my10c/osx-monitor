#!/usr/bin/env python3
"""A python """
# BSD 3-Clause License
#
# Copyright (c) 2012, © Badassops LLC / Luc Suryo
# All rights reserved.
#
#*
#* File        :   check-uptime-osx
#*
#* Description    :   script to check the uptime of an OSX system, use for monitoring
#*
#* Author    :    Luc Suryo <luc@badassops.com>
#*
#* Version    :    0.4
#*
#* Date        :    Sep 3, 2025
#*
#* History    :
#*        Date:          Author:        Info:
#*        Aug 17, 2012   LIS        First Release
#*        Dec 20, 2016   LIS        make sure it works with python3
#*        Mar 7, 2019    LIS        added colors :)
#*        Sep 3, 2025    LIS        text fixes
##{% raw %}

import signal
import sys
import os
import time
import argparse
import socket
import subprocess

from time import time, sleep, strftime

__progname__ = os.path.basename(__file__)
__author__      = 'Luc Suryo'
__copyright__   = 'Copyright 2012 - ' + strftime('%Y') + ' © Badassops LLC'
__license__     = 'License 3-Clause BSD, https://opensource.org/licenses/BSD-3-Clause ♥'
__version__     = '0.4'
__email__       = '<luc@badassops.com>'
__info__        = f'{__version__}\n{__copyright__}\nLicense {__license__}\n\nWritten by {__author__} {__email__}\n'
__description__ = 'nagios check script to check the uptime of a server running OSX'
__usage_txt__   = '<--critical value>'
__host__        = socket.gethostname().split('.', 1)[0]

# colors
colorOFF    = '\033[0m'
colorRed    = '\033[1;31m'
colorGreen  = '\033[1;32m'
colorYellow = '\033[1;33m'
colorBlue   = '\033[1;34m'
colorPurple = '\033[1;35m'

# Defaults
DEFAULT_CRITICAL = 1200

# Help messages
_HELP_CRITICAL = f'critical uptime in seconds, default to {DEFAULT_CRITICAL}'

# use variable
command = ['sysctl', 'kern.boottime']

def signal_handler(signum, frame):
    """Signal/interrupts handler
        @param  signum  {int}       The interrupt ID according to signal.h.
        @param  frame   {string}    Memory frame where the interrupted was called.
    """
    DEBUG = 0
    print(f'\n\n{colorYellow}Process aborted due to received an interrupt: {signum} {colorOFF}')

    if DEBUG == 1:
        print (f'\n\n{colorYellow}Frame: {frame}{colorOFF}')
    sys.exit(128 + signum)

def uptime_check(critical):
    """
        @param    critical : critical level
    """
    current_time_seconds = time()
    display_critical = round(critical/60)
    try:
        kernel_info = subprocess.run(command, capture_output=True, text=True, check=True)
        kernel_sec  = kernel_info.stdout.split()[4].replace(',', '')
        uptime_sec = int(current_time_seconds) - int(kernel_sec)
        uptime_min = round(uptime_sec / 60)
        uptime_day = round(uptime_sec / 86400)
    except Exception as err:
        print(f'Unknown error: {err}')
        sys.exit(3)

    if uptime_sec < critical:
        print(f'CRITICAL - {__host__} server uptime less than {uptime_min} minutes |' +
              f'uptime={uptime_min};;{display_critical};')
        sys.exit(2)
    else:
        if uptime_day > 1:
            print(f'OK - {__host__} server uptime is {uptime_day} days |' +
                  f'uptime={uptime_min};;{display_critical};')
        else:
            print(f'OK - {__host__} server uptime is {uptime_min} minutes |' +
                  f'uptime={uptime_min};;{display_critical};')
        sys.exit(0)

if __name__ == "__main__":
    # Install signal/interrupts handler, we capture only SIGHUP, SIGINT and TERM
    signal.signal(signal.SIGHUP, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # Process giving arguments
    parser = argparse.ArgumentParser(usage = __usage_txt__, description = __description__,
          formatter_class = argparse.RawDescriptionHelpFormatter, conflict_handler='resolve')

    parser.add_argument('-v', '--version', action = 'version', version = __info__)

    parser.add_argument('-c', '--critical', action = 'store', dest = 'critical',
          default = DEFAULT_CRITICAL, help = _HELP_CRITICAL)

    options = parser.parse_args()
    uptime_check(int(options.critical))
#{%- endraw %}
